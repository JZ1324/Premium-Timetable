// AI Timetable Parser Service using Together.ai API

import Together from "together-ai";
import { getTogetherApiKey } from "../utils/apiKeyManager";

/**
 * Helper function to clean and validate JSON before returning
 * @param {Object} jsonObject - The parsed JSON object
 * @returns {Object} - The cleaned and validated JSON object
 */
const cleanAndValidateJson = (jsonObject) => {
  try {
    // Ensure all required top-level properties exist
    if (!jsonObject.days || !Array.isArray(jsonObject.days)) {
      jsonObject.days = ["Day 1", "Day 2", "Day 3", "Day 4", "Day 5"];
    }

    if (!jsonObject.periods || !Array.isArray(jsonObject.periods) || jsonObject.periods.length < 3) {
      jsonObject.periods = [
        { name: "Period 1", startTime: "8:35am", endTime: "9:35am" },
        { name: "Period 2", startTime: "9:40am", endTime: "10:40am" },
        { name: "Tutorial", startTime: "10:45am", endTime: "10:55am" },
        { name: "Recess", startTime: "10:55am", endTime: "11:25am" },
        { name: "Period 3", startTime: "11:25am", endTime: "12:25pm" },
        { name: "Period 4", startTime: "12:30pm", endTime: "1:30pm" },
        { name: "Lunch", startTime: "1:30pm", endTime: "2:25pm" },
        { name: "Period 5", startTime: "2:25pm", endTime: "3:25pm" }
      ];
    }

    if (!jsonObject.classes || typeof jsonObject.classes !== 'object') {
      jsonObject.classes = {};
    }

    // Ensure each day has an entry in classes
    jsonObject.days.forEach(day => {
      if (!jsonObject.classes[day]) {
        jsonObject.classes[day] = {};
      }
      
      // Ensure each period exists for each day
      jsonObject.periods.forEach(period => {
        if (!jsonObject.classes[day][period.name]) {
          jsonObject.classes[day][period.name] = [];
        }
      });
    });

    // Return the validated object
    return jsonObject;
  } catch (error) {
    console.error("Error during JSON validation:", error);
    return createDefaultTimetableStructure();
  }
};

/**
 * Creates a default timetable structure as fallback
 * @returns {Object} - Default timetable structure
 */
const createDefaultTimetableStructure = () => {
  return {
    days: ["Day 1", "Day 2", "Day 3", "Day 4", "Day 5"],
    periods: [
      { name: "Period 1", startTime: "8:35am", endTime: "9:35am" },
      { name: "Period 2", startTime: "9:40am", endTime: "10:40am" },
      { name: "Tutorial", startTime: "10:45am", endTime: "10:55am" },
      { name: "Recess", startTime: "10:55am", endTime: "11:25am" },
      { name: "Period 3", startTime: "11:25am", endTime: "12:25pm" },
      { name: "Period 4", startTime: "12:30pm", endTime: "1:30pm" },
      { name: "Lunch", startTime: "1:30pm", endTime: "2:25pm" },
      { name: "Period 5", startTime: "2:25pm", endTime: "3:25pm" }
    ],
    classes: {
      "Day 1": {},
      "Day 2": {},
      "Day 3": {},
      "Day 4": {},
      "Day 5": {}
    }
  };
};

/**
 * Parse timetable text using Together.ai API
 * @param {string} timetableText - The timetable text to parse
 * @returns {Object} - Parsed timetable JSON object
 */
export const parseTimetableText = async (timetableText) => {
  try {
    // Initialize Together AI API with API key
    const together = new Together({
      apiKey: getTogetherApiKey()
    });

    // System prompt for Together AI - using string concatenation to avoid template literal issues
    const systemPrompt = "You are a timetable parser that extracts information from provided timetable text and formats it as JSON. " +
      "\n\nThe expected JSON format is:\n" +
      "{\n" +
      '  "days": ["Day 1", "Day 2", "Day 3", "Day 4", "Day 5"],\n' +
      '  "periods": [\n' +
      '    { "name": "Period 1", "startTime": "8:35am", "endTime": "9:35am" },\n' +
      '    { "name": "Period 2", "startTime": "9:40am", "endTime": "10:40am" },\n' +
      '    { "name": "Tutorial", "startTime": "10:45am", "endTime": "10:55am" },\n' +
      '    { "name": "Recess", "startTime": "10:55am", "endTime": "11:25am" },\n' +
      '    { "name": "Period 3", "startTime": "11:25am", "endTime": "12:25pm" },\n' +
      '    { "name": "Period 4", "startTime": "12:30pm", "endTime": "1:30pm" },\n' +
      '    { "name": "Lunch", "startTime": "1:30pm", "endTime": "2:25pm" },\n' +
      '    { "name": "Period 5", "startTime": "2:25pm", "endTime": "3:25pm" }\n' +
      '  ],\n' +
      '  "classes": {\n' +
      '    "Day 1": {\n' +
      '      "Period 1": [\n' +
      '        { "subject": "Mathematics", "code": "MAT01", "room": "A12", "teacher": "Mr. Smith", "startTime": "8:35am", "endTime": "9:35am" }\n' +
      '      ],\n' +
      '      "Period 2": [\n' +
      '        { "subject": "Science", "code": "SCI01", "room": "B34", "teacher": "Mrs. Jones", "startTime": "9:40am", "endTime": "10:40am" }\n' +
      '      ],\n' +
      '      "Tutorial": [\n' +
      '        { "subject": "Tutorial", "code": "", "room": "A12", "teacher": "Mr. Smith", "startTime": "10:45am", "endTime": "10:55am" }\n' +
      '      ],\n' +
      '      "Recess": [\n' +
      '        { "subject": "Recess", "code": "", "room": "", "teacher": "", "startTime": "10:55am", "endTime": "11:25am" }\n' +
      '      ],\n' +
      '      "Period 3": [\n' +
      '        { "subject": "English", "code": "ENG01", "room": "C56", "teacher": "Ms. Wilson", "startTime": "11:25am", "endTime": "12:25pm" }\n' +
      '      ],\n' +
      '      "Period 4": [\n' +
      '        { "subject": "History", "code": "HIS01", "room": "D78", "teacher": "Dr. Brown", "startTime": "12:30pm", "endTime": "1:30pm" }\n' +
      '      ],\n' +
      '      "Lunch": [\n' +
      '        { "subject": "Lunch", "code": "", "room": "", "teacher": "", "startTime": "1:30pm", "endTime": "2:25pm" }\n' +
      '      ],\n' +
      '      "Period 5": [\n' +
      '        { "subject": "Physical Education", "code": "PE01", "room": "Gym", "teacher": "Coach Davis", "startTime": "2:25pm", "endTime": "3:25pm" }\n' +
      '      ]\n' +
      '    }\n' +
      '    /* and so on for all days */\n' +
      '  }\n' +
      '}\n\n' +
      'CRITICAL JSON FORMATTING REQUIREMENTS:\n' +
      '1. PROVIDE ONLY PURE JSON AS YOUR RESPONSE - no explanations, no "```json" code blocks, no other text.\n' +
      '2. Double-check your JSON for syntax errors - trailing commas are not allowed.\n' +
      '3. Ensure all property names are surrounded by double quotes.\n' +
      '4. Ensure all string values are surrounded by double quotes.\n' +
      '5. Escape any double quotes within string values with backslash: \\"\n' +
      '6. Never use undefined or NaN values - use empty strings "" instead.\n' +
      '7. Each class must include: subject, code, room, teacher, startTime, endTime (use empty string "" if unknown).\n' +
      '8. Make sure to parse subjects accurately - e.g., "English" is different from "English Literature"\n' +
      '9. Be sure to include recess and lunch periods with the same times as shown in the example\n' +
      '10. Always validate your response is proper JSON that can be parsed with JSON.parse()\n\n' +
      'Convert the following timetable data to this format:\n' +
      timetableText;

    // Call the Together AI API
    const response = await together.chat.completions.create({
      messages: [
        {
          role: "system",
          content: systemPrompt
        },
        {
          role: "user",
          content: ""
        }
      ],
      model: "mistralai/Mixtral-8x7B-Instruct-v0.1",
      temperature: 0.2,
      top_p: 0.7,
      max_tokens: 4000
    });

    // Extract the response content
    const aiResponse = response.choices[0]?.message?.content;
    
    if (!aiResponse) {
      throw new Error("No response from AI parser");
    }
    
    // Try to parse the response as JSON
    try {
      // Clean up any markdown or extra text that might be in the response
      const jsonStartIndex = aiResponse.indexOf('{');
      const jsonEndIndex = aiResponse.lastIndexOf('}') + 1;
      
      if (jsonStartIndex === -1 || jsonEndIndex === -1) {
        throw new Error("Could not find valid JSON in AI response");
      }
      
      let jsonContent = aiResponse.substring(jsonStartIndex, jsonEndIndex);
      
      // Additional JSON cleaning: fix common formatting issues
      // 1. Handle trailing commas in arrays and objects (common JSON parsing error)
      jsonContent = jsonContent.replace(/,\s*([}\]])/g, '$1');
      
      // 2. Replace any invalid control characters
      jsonContent = jsonContent.replace(/[\u0000-\u001F\u007F-\u009F]/g, '');
      
      // Try direct parsing first as it's most reliable
      try {
        const jsonObj = JSON.parse(jsonContent);
        return cleanAndValidateJson(jsonObj);
      } catch (directParseError) {
        console.warn("Direct JSON parse failed:", directParseError.message);
        
        // Apply more fixes
        
        // 3. Fix unescaped quotes in a simpler way (less error-prone)
        jsonContent = jsonContent.replace(/:\s*"([^"]*?)([^\\])"([^"]*?)"/g, ': "$1$2\\"$3"');
        
        // 4. Fix missing quotes around keys
        jsonContent = jsonContent.replace(/([{,]\s*)([a-zA-Z0-9_]+)(\s*:)/g, '$1"$2"$3');
        
        // 5. Fix missing quotes around string values
        jsonContent = jsonContent.replace(/:\s*([a-zA-Z][a-zA-Z0-9_\s-]*[a-zA-Z0-9])(\s*[,}])/g, ': "$1"$2');
        
        try {
          // First attempt with fixes
          return cleanAndValidateJson(JSON.parse(jsonContent));
        } catch (initialParseError) {
          console.warn("Initial JSON parse failed, attempting more aggressive fixes:", initialParseError.message);
          
          // 6. Fix problematic values - undefined, NaN, null
          jsonContent = jsonContent.replace(/:\s*(undefined|NaN|null)\s*([,}])/g, ': ""$2');
          
          // 7. Fix unclosed strings
          jsonContent = jsonContent.replace(/"([^"]*)(?:[^"\\])(,|\n|\r\n|\})/g, '"$1"$2');
          
          // 8. Remove comments from JSON
          jsonContent = jsonContent.replace(/\/\*[\s\S]*?\*\/|\/\/.*$/gm, '');
          
          try {
            // Final attempt with all fixes
            return cleanAndValidateJson(JSON.parse(jsonContent));
          } catch (finalError) {
            console.error("All JSON parsing attempts failed:", finalError);
            // Return default structure as fallback
            return createDefaultTimetableStructure();
          }
        }
      }
    } catch (error) {
      console.error("Error parsing AI response:", error);
      
      // If we have the raw response, we can try a more manual approach to extract structured data
      try {
        // Use a fallback parser using pattern matching to extract more specific information
        const fallbackParser = (text) => {
          const result = createDefaultTimetableStructure();
          
          // Simple heuristic parsing for class information
          const dayRegex = /Day\s+(\d+)/gi;
          const periodRegex = /Period\s+(\d+)/gi;
          const subjectRegex = /Subject:\s*([^,\n]+)/gi;
          const codeRegex = /Code:\s*([^,\n]+)/gi;
          const roomRegex = /Room:\s*([^,\n]+)/gi;
          const teacherRegex = /Teacher:\s*([^,\n]+)/gi;
          
          let dayMatch;
          let currentDay = "Day 1";
          let periodNum = 1;
          let currentPeriod = "Period 1";
          
          // Extract days
          while ((dayMatch = dayRegex.exec(text)) !== null) {
            const dayNum = dayMatch[1];
            const dayToUse = `Day ${dayNum}`;
            
            // Find periods for this day
            text.split(/\n/).forEach(line => {
              const periodMatch = periodRegex.exec(line);
              if (periodMatch) {
                periodNum = periodMatch[1];
                currentPeriod = "Period " + periodNum;
              }
              
              // Extract subject information
              const subjectMatch = subjectRegex.exec(line);
              if (subjectMatch) {
                const subjectName = subjectMatch[1].trim();
                const codeMatch = codeRegex.exec(line);
                const roomMatch = roomRegex.exec(line);
                const teacherMatch = teacherRegex.exec(line);
                
                // Get period data from default structure
                const periodData = result.periods.find(p => p.name === currentPeriod);
                
                if (periodData && subjectName) {
                  console.log("Adding subject " + subjectName + " to " + dayToUse + " " + currentPeriod);
                  
                  // Add class to the result
                  if (!result.classes[dayToUse][currentPeriod]) {
                    result.classes[dayToUse][currentPeriod] = [];
                  }
                  
                  result.classes[dayToUse][currentPeriod].push({
                    subject: subjectName,
                    code: codeMatch ? codeMatch[1].trim() : "",
                    room: roomMatch ? roomMatch[1].trim() : "",
                    teacher: teacherMatch ? teacherMatch[1].trim() : "",
                    startTime: periodData.startTime,
                    endTime: periodData.endTime
                  });
                }
              }
            });
          }
          
          return result;
        };
        
        return fallbackParser(aiResponse);
      } catch (fallbackError) {
        console.error("Fallback parsing failed:", fallbackError);
        throw new Error("AI parsing failed. " + (error.message || "Please try again or use another import method."));
      }
    }
  } catch (error) {
    console.error("Error in AI parsing service:", error);
    throw new Error("AI parsing failed. " + (error.message || "Please try again or use another import method."));
  }
};
