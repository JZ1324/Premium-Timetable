// AI Timetable Parser Service using OpenRouter.ai API

import { getOpenRouterApiKey } from "../utils/apiKeyManager";
import { tryParseJson } from "./jsonSanitizer";

// [Many helper functions and constants...]

export const parseTimetableText = async (timetableText) => {
  try {
    // [Implementation details...]
  } catch (error) {
    // [Error handling...]
    throw new Error("AI parsing failed. " + (error.message || "Please try again or use another import method."));
  }
}

/**
 * Helper function to redistribute classes across days if they're all in Day 1
 * and ensure multiple classes per period are properly handled
 */
const redistributeClasses = (jsonObject, textLength) => {
  // [Implementation details...]
};

/**
 * Publicly exported fallback parser function
 */
export const fallbackParser = (timetableText, textLength) => {
  try {
    // [Implementation details...]
    
    // Fall back to the regular line-by-line parser
    console.log("Using standard line-by-line parser");
    try {
      // [Line-by-line parser implementation...]
      
      // Apply final redistribution and validation
      return redistributeClasses(result, textLen);
    } catch (error) {
      console.error("Error in fallback parser:", error);
      return createDefaultTimetableStructure();
    }
  } catch (error) {
    console.error("Error in fallback parser:", error);
    return createDefaultTimetableStructure();
  }
};

// Helper functions for extraction
function extractSubject(text) {
  // [Implementation details...]
}

function extractCode(text) {
  // [Implementation details...]
}

function extractRoom(text) {
  // [Implementation details...]
}

function extractTeacher(text) {
  // [Implementation details...]
}

// Also export parseWithAI as an alias for parseTimetableText for compatibility
export const parseWithAI = parseTimetableText;
