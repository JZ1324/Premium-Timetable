rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Rules for user documents - simplified and more permissive for registration
    match /users/{userId} {
      // Allow authenticated users to create, read, and write their own user document
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
      
      // Allow public read access for username availability checks during registration
      allow read: if true;
    }
    
    // Rules for timetable data
    match /timetables/{userId} {
      // Allow read and write if the user is authenticated and the document belongs to them
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow user to manage their own templates
      match /templates/{templateId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Rules for user settings
    match /settings/{userId} {
      // Allow read and write if the user is authenticated and the document belongs to them
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Rules for practice reminders
    match /users/{userId}/practiceReminders/{reminderId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow reading public data
    match /public/{document} {
      allow read: if request.auth != null;
    }
    
    // Admin collection access
    match /admin/{document} {
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('role', '') == 'admin';
    }
  }
}
